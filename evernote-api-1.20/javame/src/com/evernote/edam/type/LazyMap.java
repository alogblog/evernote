/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * A structure that wraps a map of name/value pairs whose values are not
 * always present in the structure in order to reduce space when obtaining
 * batches of entities that contain the map.
 * 
 * When the server provides the client with a LazyMap, it will fill in either
 * the keysOnly field or the fullMap field, but never both, based on the API
 * and parameters.
 * 
 * When a client provides a LazyMap to the server as part of an update to
 * an object, the server will only update the LazyMap if the fullMap field is
 * set. If the fullMap field is not set, the server will not make any changes
 * to the map.
 * 
 * Check the API documentation of the individual calls involving the LazyMap
 * for full details including the constraints of the names and values of the
 * map.
 * 
 * <dl>
 * <dt>keysOnly</dt>
 *   <dd>The set of keys for the map.  This field is ignored by the
 *       server when set.
 *   </dd>
 * 
 * <dt>fullMap</dt>
 *   <dd>The complete map, including all keys and values.
 *   </dd>
 * </dl>
 */
public class LazyMap implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("LazyMap");

  private static final TField KEYS_ONLY_FIELD_DESC = new TField("keysOnly", TType.SET, (short)1);
  private static final TField FULL_MAP_FIELD_DESC = new TField("fullMap", TType.MAP, (short)2);

  private Hashtable keysOnly;
  private Hashtable fullMap;

  // isset id assignments

  public LazyMap() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LazyMap(LazyMap other) {
    if (other.isSetKeysOnly()) {
      Hashtable __this__keysOnly = new Hashtable();
      for (Enumeration other_enum = other.keysOnly.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__keysOnly.addElement(other_element);
      }
      this.keysOnly = __this__keysOnly;
    }
    if (other.isSetFullMap()) {
      Hashtable __this__fullMap = new Hashtable();
      for (Enumeration other_enum = other.fullMap.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.fullMap.get(other_element_key);

        String __this__fullMap_copy_key = other_element_key;

        String __this__fullMap_copy_value = other_element_value;

        __this__fullMap.put(__this__fullMap_copy_key, __this__fullMap_copy_value);
      }
      this.fullMap = __this__fullMap;
    }
  }

  public LazyMap deepCopy() {
    return new LazyMap(this);
  }

  public LazyMap clone() {
    return new LazyMap(this);
  }

  public void clear() {
    this.keysOnly = null;
    this.fullMap = null;
  }

  public int getKeysOnlySize() {
    return (this.keysOnly == null) ? 0 : this.keysOnly.size();
  }

  public Enumeration getKeysOnlyEnumeration() {
    return (this.keysOnly == null) ? null : this.keysOnly.elements();
  }

  public void addToKeysOnly(String elem) {
    if (this.keysOnly == null) {
      this.keysOnly = new Hashtable();
    }
    this.keysOnly.put(elem, elem);
  }

  public Hashtable getKeysOnly() {
    return this.keysOnly;
  }

  public void setKeysOnly(Hashtable keysOnly) {
    this.keysOnly = keysOnly;
  }

  public void unsetKeysOnly() {
    this.keysOnly = null;
  }

  /** Returns true if field keysOnly is set (has been asigned a value) and false otherwise */
  public boolean isSetKeysOnly() {
    return this.keysOnly != null;
  }

  public void setKeysOnlyIsSet(boolean value) {
    if (!value) {
      this.keysOnly = null;
    }
  }

  public int getFullMapSize() {
    return (this.fullMap == null) ? 0 : this.fullMap.size();
  }

  public void putToFullMap(String key, String val) {
    if (this.fullMap == null) {
      this.fullMap = new Hashtable();
    }
    this.fullMap.put(key, val);
  }

  public Hashtable getFullMap() {
    return this.fullMap;
  }

  public void setFullMap(Hashtable fullMap) {
    this.fullMap = fullMap;
  }

  public void unsetFullMap() {
    this.fullMap = null;
  }

  /** Returns true if field fullMap is set (has been asigned a value) and false otherwise */
  public boolean isSetFullMap() {
    return this.fullMap != null;
  }

  public void setFullMapIsSet(boolean value) {
    if (!value) {
      this.fullMap = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LazyMap)
      return this.equals((LazyMap)that);
    return false;
  }

  public boolean equals(LazyMap that) {
    if (that == null)
      return false;

    boolean this_present_keysOnly = true && this.isSetKeysOnly();
    boolean that_present_keysOnly = true && that.isSetKeysOnly();
    if (this_present_keysOnly || that_present_keysOnly) {
      if (!(this_present_keysOnly && that_present_keysOnly))
        return false;
      if (!this.keysOnly.equals(that.keysOnly))
        return false;
    }

    boolean this_present_fullMap = true && this.isSetFullMap();
    boolean that_present_fullMap = true && that.isSetFullMap();
    if (this_present_fullMap || that_present_fullMap) {
      if (!(this_present_fullMap && that_present_fullMap))
        return false;
      if (!this.fullMap.equals(that.fullMap))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    LazyMap other = (LazyMap)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetKeysOnly(), other.isSetKeysOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeysOnly()) {
      lastComparison = TBaseHelper.compareTo(this.keysOnly, other.keysOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFullMap(), other.isSetFullMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullMap()) {
      lastComparison = TBaseHelper.compareTo(this.fullMap, other.fullMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEYS_ONLY
          if (field.type == TType.SET) {
            {
              TSet _set8 = iprot.readSetBegin();
              this.keysOnly = new Hashtable(2*_set8.size);
              for (int _i9 = 0; _i9 < _set8.size; ++_i9)
              {
                String _elem10;
                _elem10 = iprot.readString();
                this.keysOnly.put(_elem10, _elem10);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FULL_MAP
          if (field.type == TType.MAP) {
            {
              TMap _map11 = iprot.readMapBegin();
              this.fullMap = new Hashtable(2*_map11.size);
              for (int _i12 = 0; _i12 < _map11.size; ++_i12)
              {
                String _key13;
                String _val14;
                _key13 = iprot.readString();
                _val14 = iprot.readString();
                this.fullMap.put(_key13, _val14);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.keysOnly != null) {
      if (isSetKeysOnly()) {
        oprot.writeFieldBegin(KEYS_ONLY_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.keysOnly.size()));
          for (Enumeration _iter15_enum = this.keysOnly.keys(); _iter15_enum.hasMoreElements(); )           {
            String _iter15 = (String)_iter15_enum.nextElement();
            oprot.writeString(_iter15);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.fullMap != null) {
      if (isSetFullMap()) {
        oprot.writeFieldBegin(FULL_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.fullMap.size()));
          for (Enumeration _iter16_enum = this.fullMap.keys(); _iter16_enum.hasMoreElements(); )           {
            String _iter16 = (String)_iter16_enum.nextElement();
            oprot.writeString(_iter16);
            oprot.writeString((String)this.fullMap.get(_iter16));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("LazyMap(");
    boolean first = true;

    if (isSetKeysOnly()) {
      sb.append("keysOnly:");
      if (this.keysOnly == null) {
        sb.append("null");
      } else {
        sb.append(this.keysOnly);
      }
      first = false;
    }
    if (isSetFullMap()) {
      if (!first) sb.append(", ");
      sb.append("fullMap:");
      if (this.fullMap == null) {
        sb.append("null");
      } else {
        sb.append(this.fullMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

